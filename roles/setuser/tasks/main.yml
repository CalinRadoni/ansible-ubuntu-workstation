---

# Requirements: ansible.posix
# Install the requirements with: `ansible-galaxy collection install ansible.posix`
#
# Variables:
#
# x_user dictionary with these fields:
#   - name
#   - (optional) group
#   - (optional) shell
#   - (optional) add_to_groups
#   - (optional) sshkey
#     - (optional) sshkey_exclusive
#     - (optional) sshkey_options
#
# Links:
# - https://docs.ansible.com/ansible/latest/collections/ansible/builtin/user_module.html
# - https://docs.ansible.com/ansible/latest/collections/ansible/posix/authorized_key_module.html

- name: Verify x_user variable
  ansible.builtin.assert:
    that:
      - x_user is defined
      - x_user is not string
      - x_user is iterable
      - x_user is mapping
    fail_msg: "x_user dictionary must be defined !"
    quiet: true

- name: Verify required string variables
  ansible.builtin.assert:
    that:
      - x_user['name'] is defined
      - x_user['name'] != None
      - x_user['name'] | length > 0
    fail_msg: "x_user['name'] must be set !"
    quiet: true

- name: Get stat of user's shell
  ansible.builtin.stat:
    path: "{{ x_user['shell'] }}"
  register: stat_file
  when: x_user['shell'] is defined

- name: Check stat of user's shell
  ansible.builtin.assert:
    that:
      - stat_file.stat.exists
      - stat_file.stat.isreg or stat_file.stat.islnk
      - stat_file.stat.readable
      - stat_file.stat.executable
    fail_msg: "{{ stat_file.stat.path }} must exists, be readable and executable !"
    quiet: true
  when: x_user['shell'] is defined

- name: Add primary group if needed
  become: true
  become_user: root
  ansible.builtin.group:
    name: "{{ x_user['group'] }}"
    state: present
  when: x_user['group'] is defined

- name: Add / set the user
  become: true
  become_user: root
  ansible.builtin.user:
    name: "{{ x_user['name'] }}"
    group: "{{ x_user['group'] | default(omit) }}"
    shell: "{{ x_user['shell'] | default(omit) }}"
    state: present

- name: Check group membership
  become: true
  become_user: root
  ansible.builtin.user:
    name: "{{ x_user['name'] }}"
    groups: "{{ x_user['add_to_groups'] }}"
    append: true
  when: x_user['add_to_groups'] is defined

- name: Add a SSH authorized key
  become: true
  become_user: root
  ansible.posix.authorized_key:
    user: "{{ x_user['name'] }}"
    state: present
    key: "{{ x_user['sshkey'] }}"
    exclusive: "{{ x_user['sshkey_exclusive'] | default(omit) }}"
    key_options: "{{ x_user['sshkey_options'] | default(omit) }}"
  when: x_user['sshkey'] is defined
